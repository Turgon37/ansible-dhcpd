---

- name: Include common instance ending tasks
  include_tasks: types/_header.yml
  tags: ['always']

# TODO
- name: Assert required FILES variables
  assert:
    that:
      - true
  tags: ['always']

# secret keys management

# OMAPI secret key

- name: Add autogenerated secret key for OMAPI if needed
  set_fact:
    _dhcpd__instance_keys: "{{ {dhcpd__instance.omapi_key_name: {'algorithm': dhcpd__instance.omapi_key_algorithm} }|combine(_dhcpd__instance_keys) }}"
  when: dhcpd__instance.omapi_enabled|bool
  tags: ['dhcpd', 'dhcpd-configure']

- name: Assert secret keys configurations
  assert:
    that:
      - item.value.algorithm is defined and item.value.algorithm in dhcpd__keys_size_mapping.keys()
  with_dict: '{{ _dhcpd__instance_keys }}'
  tags: ['always']

# instance's secret keys

- name: Test keys for existing secret in file
  command: "grep --perl-regexp --only-matching '(?<=secret ).*[^;]' '{{ _dhcpd__instance_keys_directory }}/{{ item.key }}.key'"
  with_dict: '{{ _dhcpd__instance_keys }}'
  when: item.value['secret'] is not defined
  register: _dhcpd__existing_keys
  failed_when: false
  changed_when: false
  check_mode: false
  tags: ['dhcpd', 'dhcpd-configure']

  # Fetch secret from existing files
- name: Set existing random secret for missing keys
  set_fact:
    _dhcpd__instance_keys: "{{ _dhcpd__instance_keys|combine({item.item.key: {'secret': item.stdout} }, recursive=true) }}"
  with_items: '{{ _dhcpd__existing_keys.results|list }}'
  when: _dhcpd__instance_keys[item.item.key]['secret'] is not defined and (item.rc == 0 and item.stdout|length > 0)
  tags: ['dhcpd', 'dhcpd-configure']

  # Generate new random keys
- name: Generate random secret for missing keys
  shell: "dd if=/dev/urandom 'bs={{ dhcpd__keys_size_mapping[_dhcpd__instance_keys[item.item.key]['algorithm']] }}' count=1 2>/dev/null | base64"
  with_items: '{{ _dhcpd__existing_keys.results|list }}'
  when: _dhcpd__instance_keys[item.item.key]['secret'] is not defined and (item.rc != 0 or item.stdout|length == 0)
  register: _dhcpd__random_keys
  check_mode: false
  tags: ['dhcpd', 'dhcpd-configure']

- name: Set random generated secret for missing keys
  set_fact:
    _dhcpd__instance_keys: "{{ _dhcpd__instance_keys|combine({item.item.item.key:{'secret': item.stdout }}, recursive=true) }}"
  with_items: '{{ _dhcpd__random_keys.results|list }}'
  when: _dhcpd__instance_keys[item.item.item.key]['secret'] is not defined and (item.rc == 0 and item.stdout|length > 0)
  tags: ['dhcpd', 'dhcpd-configure']

- name: Install secret keys
  template:
    src: key.j2
    dest: '{{ _dhcpd__instance_keys_directory }}/{{ item.key }}.key'
    owner: root
    group: root
    mode: 0640
    validate: '{{ dhcpd__service_executable }} -{{ dhcpd__instance.ip_version|int }} -t -cf %s'
  with_dict: '{{ _dhcpd__instance_keys }}'
  register: _dhcpd__instance_keys_files
  tags: ['dhcpd', 'dhcpd-configure']

- name: Compute instance restart conditions
  set_fact:
    _dhcpd__instance_restart: '{{ _dhcpd__instance_keys_files is changed }}'
  tags: ['dhcpd', 'dhcpd-configure']

- name: Include common instance ending tasks
  include_tasks: types/_footer.yml
  tags: ['always']

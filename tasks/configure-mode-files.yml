---
# TODO
- name: Assert required FILES variables
  assert:
    that:
      - True

- name: Add autogenerated secret key for OMAPI if needed
  set_fact:
    dhcpd__keys: "{{ {dhcpd__omapi_key_name: {'algorithm': dhcpd__omapi_key_algorithm} }|combine(dhcpd__keys) }}"
  when: dhcpd__omapi_enabled|bool

- name: Assert secret keys configurations
  assert:
    that:
      - item.value.algorithm is defined and item.value.algorithm in dhcpd__keys_size_mapping.keys()
  with_dict: '{{ dhcpd__keys }}'

- name: Create keys directory
  file:
    path:  '{{ dhcpd__keys_dir }}'
    owner: root
    group: root
    mode:  0755
    state: directory
  notify: [ 'restart-dhcpd' ]

- name: Test keys for existing secret in file
  command: "grep --perl-regexp --only-matching '(?<=secret ).*[^;]' '{{ dhcpd__keys_dir }}/{{ item.key }}.key'"
  with_dict: '{{ dhcpd__keys }}'
  when: item.value['secret'] is not defined
  register: _dhcpd__existing_keys
  failed_when: False
  changed_when: False
  check_mode: False

  # Fetch secret from existing files
- name: Set existing random secret for missing keys
  set_fact:
    dhcpd__keys: "{{ dhcpd__keys|combine({item.item.key: {'secret': item.stdout} }, recursive=True) }}"
  with_items: '{{ _dhcpd__existing_keys.results }}'
  when: dhcpd__keys[item.item.key]['secret'] is not defined and (item.rc == 0 and item.stdout|length > 0)

  # Generate new random keys
- name: Generate random secret for missing keys
  shell: "dd if=/dev/urandom 'bs={{ dhcpd__keys_size_mapping[dhcpd__keys[item.item.key]['algorithm']] }}' count=1 2>/dev/null | base64"
  with_items: '{{ _dhcpd__existing_keys.results }}'
  when: dhcpd__keys[item.item.key]['secret'] is not defined and (item.rc != 0 or item.stdout|length == 0)
  register: _dhcpd__random_keys
  check_mode: False

- name: Set random generated secret for missing keys
  set_fact:
    dhcpd__keys: "{{ dhcpd__keys|combine({item.item.item.key:{'secret': item.stdout }}, recursive=True) }}"
  with_items: '{{ _dhcpd__random_keys.results }}'
  when: dhcpd__keys[item.item.item.key]['secret'] is not defined and (item.rc == 0 and item.stdout|length > 0)

- name: Install secret keys
  template:
    src:   key.j2
    dest:  '{{ dhcpd__keys_dir }}/{{ item.key }}.key'
    owner: root
    group: root
    mode:  0640
    validate: '{{ dhcpd__executable }} -t -cf %s'
  with_dict: '{{ dhcpd__keys }}'
  notify: [ 'restart-dhcpd' ]

- name: Configure DHCP server
  template:
    src:   'dhcpd.conf.files.j2'
    dest:  '{{ dhcpd__config_file }}'
    owner: root
    group: root
    mode:  0644
    validate: '{{ dhcpd__executable }} -t -cf %s'
  notify: [ 'restart-dhcpd' ]
